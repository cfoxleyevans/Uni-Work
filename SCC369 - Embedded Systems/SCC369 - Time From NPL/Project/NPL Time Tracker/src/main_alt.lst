CCS PCM C Compiler, Version 5.017d, 1               11-Mar-14 22:44
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\Chris Foxley-Evans\Desktop\Embedded Systems Code\NPL Time Tracker\src\main_alt.lst

               ROM used:   2177 words (27%)
                           Largest free fragment is 2048
               RAM used:   156 (44%) at main() level
                           181 (51%) worst case
               Stack used: 7 locations (4 in main + 3 for interrupts)
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  08
0002:  MOVWF  0A
0003:  GOTO   000
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   052
002B:  MOVLW  8C
002C:  MOVWF  04
002D:  BTFSS  00.1
002E:  GOTO   031
002F:  BTFSC  0C.1
0030:  GOTO   055
0031:  MOVF   22,W
0032:  MOVWF  04
0033:  MOVF   23,W
0034:  MOVWF  77
0035:  MOVF   24,W
0036:  MOVWF  78
0037:  MOVF   25,W
0038:  MOVWF  79
0039:  MOVF   26,W
003A:  MOVWF  7A
003B:  MOVF   27,W
003C:  BSF    03.6
003D:  MOVWF  0D
003E:  BCF    03.6
003F:  MOVF   28,W
0040:  BSF    03.6
0041:  MOVWF  0F
0042:  BCF    03.6
0043:  MOVF   29,W
0044:  BSF    03.6
0045:  MOVWF  0C
0046:  BCF    03.6
0047:  MOVF   2A,W
0048:  BSF    03.6
0049:  MOVWF  0E
004A:  BCF    03.6
004B:  MOVF   20,W
004C:  MOVWF  0A
004D:  SWAPF  21,W
004E:  MOVWF  03
004F:  SWAPF  7F,F
0050:  SWAPF  7F,W
0051:  RETFIE
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   2B1
0055:  BCF    0A.3
0056:  BCF    0A.4
0057:  GOTO   07B
.................... #include <16f727.h> 
.................... //////////// Standard Header file for the PIC16F727 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F727 
0058:  BCF    0A.0
0059:  BCF    0A.1
005A:  BCF    0A.2
005B:  ADDWF  02,F
005C:  RETLW  28
005D:  RETLW  0C
005E:  RETLW  01
005F:  RETLW  06
0060:  DATA D3,3A
0061:  DATA 6E,00
0062:  DATA CD,37
0063:  DATA 6E,00
0064:  DATA D4,3A
0065:  DATA E5,39
0066:  DATA 00,01
0067:  DATA D7,32
0068:  DATA 73,00
0069:  DATA 54,34
006A:  DATA 75,39
006B:  DATA 73,00
006C:  DATA 46,39
006D:  DATA 69,00
006E:  DATA D3,30
006F:  DATA 74,00
0070:  DATA BF,1F
0071:  DATA 3F,00
0072:  DATA 20,00
0073:  DATA 2F,00
0074:  DATA 2F,19
0075:  DATA 30,00
0076:  DATA 0A,00
0077:  DATA 3A,00
0078:  DATA 3A,00
0079:  DATA A0,15
007A:  DATA 00,00
*
028A:  BCF    0A.0
028B:  BSF    0A.1
028C:  BCF    0A.2
028D:  ADDWF  02,F
028E:  GOTO   099
028F:  GOTO   0A7
0290:  GOTO   0B5
0291:  GOTO   0C3
0292:  GOTO   0D1
0293:  GOTO   0DF
0294:  GOTO   0ED
0295:  GOTO   0FB
0296:  GOTO   109
0297:  GOTO   117
0298:  GOTO   125
0299:  GOTO   133
029A:  GOTO   141
029B:  GOTO   14F
029C:  GOTO   15D
029D:  GOTO   16B
029E:  GOTO   179
029F:  GOTO   187
02A0:  GOTO   195
02A1:  GOTO   1A3
02A2:  GOTO   1B1
02A3:  GOTO   1BF
02A4:  GOTO   1CD
02A5:  GOTO   1DB
02A6:  GOTO   1E9
02A7:  GOTO   1F7
02A8:  GOTO   205
02A9:  GOTO   213
02AA:  GOTO   221
02AB:  GOTO   22F
02AC:  GOTO   23D
02AD:  GOTO   24B
02AE:  GOTO   259
02AF:  GOTO   267
02B0:  GOTO   275
*
0510:  MOVF   0B,W
0511:  BSF    03.6
0512:  MOVWF  55
0513:  BCF    03.6
0514:  BCF    0B.7
0515:  BSF    03.5
0516:  BSF    03.6
0517:  BSF    0C.7
0518:  BSF    0C.0
0519:  NOP
051A:  NOP
051B:  BCF    03.5
051C:  BTFSS  55.7
051D:  GOTO   521
051E:  BCF    03.6
051F:  BSF    0B.7
0520:  BSF    03.6
0521:  MOVF   0C,W
0522:  ANDLW  7F
0523:  BTFSS  03.2
0524:  GOTO   527
0525:  BCF    03.6
0526:  GOTO   561
0527:  MOVWF  55
0528:  MOVF   0D,W
0529:  MOVWF  56
052A:  MOVF   0F,W
052B:  MOVWF  57
052C:  MOVF   55,W
052D:  MOVWF  58
052E:  BCF    03.6
052F:  CALL   4C2
0530:  BSF    03.6
0531:  MOVF   56,W
0532:  MOVWF  0D
0533:  MOVF   57,W
0534:  MOVWF  0F
0535:  BCF    03.6
0536:  MOVF   0B,W
0537:  BSF    03.6
0538:  MOVWF  58
0539:  BCF    03.6
053A:  BCF    0B.7
053B:  BSF    03.5
053C:  BSF    03.6
053D:  BSF    0C.7
053E:  BSF    0C.0
053F:  NOP
0540:  NOP
0541:  BCF    03.5
0542:  BTFSS  58.7
0543:  GOTO   547
0544:  BCF    03.6
0545:  BSF    0B.7
0546:  BSF    03.6
0547:  RLF    0C,W
0548:  RLF    0E,W
0549:  ANDLW  7F
054A:  BTFSS  03.2
054B:  GOTO   54E
054C:  BCF    03.6
054D:  GOTO   561
054E:  MOVWF  55
054F:  MOVF   0D,W
0550:  MOVWF  56
0551:  MOVF   0F,W
0552:  MOVWF  57
0553:  MOVF   55,W
0554:  MOVWF  58
0555:  BCF    03.6
0556:  CALL   4C2
0557:  BSF    03.6
0558:  MOVF   56,W
0559:  MOVWF  0D
055A:  MOVF   57,W
055B:  MOVWF  0F
055C:  INCF   0D,F
055D:  BTFSC  03.2
055E:  INCF   0F,F
055F:  BCF    03.6
0560:  GOTO   510
0561:  RETURN
0562:  CLRF   78
0563:  CLRF   79
0564:  CLRF   77
0565:  CLRF   7A
0566:  BSF    03.6
0567:  MOVF   5F,W
0568:  BTFSC  03.2
0569:  GOTO   56C
056A:  BCF    03.6
056B:  GOTO   572
056C:  MOVF   5E,W
056D:  BTFSS  03.2
056E:  GOTO   571
056F:  BCF    03.6
0570:  GOTO   59A
0571:  BCF    03.6
0572:  MOVLW  10
0573:  BSF    03.6
0574:  MOVWF  60
0575:  BCF    03.6
0576:  BCF    03.0
0577:  BSF    03.6
0578:  RLF    5C,F
0579:  RLF    5D,F
057A:  RLF    77,F
057B:  RLF    7A,F
057C:  MOVF   5F,W
057D:  SUBWF  7A,W
057E:  BTFSC  03.2
057F:  GOTO   582
0580:  BCF    03.6
0581:  GOTO   585
0582:  MOVF   5E,W
0583:  SUBWF  77,W
0584:  BCF    03.6
0585:  BTFSS  03.0
0586:  GOTO   590
0587:  BSF    03.6
0588:  MOVF   5E,W
0589:  SUBWF  77,F
058A:  BTFSS  03.0
058B:  DECF   7A,F
058C:  MOVF   5F,W
058D:  SUBWF  7A,F
058E:  BSF    03.0
058F:  BCF    03.6
0590:  RLF    78,F
0591:  RLF    79,F
0592:  BSF    03.6
0593:  DECFSZ 60,F
0594:  GOTO   597
0595:  GOTO   599
0596:  BCF    03.6
0597:  BCF    03.6
0598:  GOTO   576
0599:  BCF    03.6
059A:  RETURN
059B:  MOVLW  10
059C:  BSF    03.6
059D:  MOVWF  5E
059E:  CLRF   77
059F:  CLRF   7A
05A0:  BCF    03.6
05A1:  BSF    03.6
05A2:  RRF    5B,F
05A3:  RRF    5A,F
05A4:  BTFSC  03.0
05A5:  GOTO   5A8
05A6:  BCF    03.6
05A7:  GOTO   5AF
05A8:  MOVF   5C,W
05A9:  ADDWF  77,F
05AA:  BTFSC  03.0
05AB:  INCF   7A,F
05AC:  MOVF   5D,W
05AD:  ADDWF  7A,F
05AE:  BCF    03.6
05AF:  RRF    7A,F
05B0:  RRF    77,F
05B1:  RRF    79,F
05B2:  RRF    78,F
05B3:  BSF    03.6
05B4:  DECFSZ 5E,F
05B5:  GOTO   5B8
05B6:  GOTO   5BA
05B7:  BCF    03.6
05B8:  BCF    03.6
05B9:  GOTO   5A1
05BA:  BCF    03.6
05BB:  RETURN
05BC:  CLRF   77
05BD:  CLRF   78
05BE:  BSF    03.6
05BF:  MOVF   5C,W
05C0:  BCF    03.0
05C1:  BTFSC  5D.0
05C2:  ADDWF  77,F
05C3:  RRF    77,F
05C4:  RRF    78,F
05C5:  BTFSC  5D.1
05C6:  ADDWF  77,F
05C7:  RRF    77,F
05C8:  RRF    78,F
05C9:  BTFSC  5D.2
05CA:  ADDWF  77,F
05CB:  RRF    77,F
05CC:  RRF    78,F
05CD:  BTFSC  5D.3
05CE:  ADDWF  77,F
05CF:  RRF    77,F
05D0:  RRF    78,F
05D1:  BTFSC  5D.4
05D2:  ADDWF  77,F
05D3:  RRF    77,F
05D4:  RRF    78,F
05D5:  BTFSC  5D.5
05D6:  ADDWF  77,F
05D7:  RRF    77,F
05D8:  RRF    78,F
05D9:  BTFSC  5D.6
05DA:  ADDWF  77,F
05DB:  RRF    77,F
05DC:  RRF    78,F
05DD:  BTFSC  5D.7
05DE:  ADDWF  77,F
05DF:  RRF    77,F
05E0:  RRF    78,F
05E1:  BCF    03.6
05E2:  RETURN
....................  
.................... #list 
....................  
....................  
.................... //Tell the compiler to use no optimisation 
.................... #opt 0 
....................  
.................... //Set the config bits that will be used by the processor 
.................... #FUSES NOWDT, INTRC          
....................  
.................... //Tell the compiler what clock speed we want the processor to use this makes 
.................... //sure that delays will be correct 
.................... #use delay(clock=16000000) 
*
03BF:  MOVLW  59
03C0:  MOVWF  04
03C1:  BSF    03.7
03C2:  MOVF   00,W
03C3:  BTFSC  03.2
03C4:  GOTO   3D3
03C5:  MOVLW  05
03C6:  MOVWF  78
03C7:  CLRF   77
03C8:  DECFSZ 77,F
03C9:  GOTO   3C8
03CA:  DECFSZ 78,F
03CB:  GOTO   3C7
03CC:  MOVLW  2E
03CD:  MOVWF  77
03CE:  DECFSZ 77,F
03CF:  GOTO   3CE
03D0:  GOTO   3D1
03D1:  DECFSZ 00,F
03D2:  GOTO   3C5
03D3:  RETURN
.................... #include "flex_lcd.c" 
.................... // flex_lcd.c  
....................  
.................... // These pins are for the Microchip PicDem2-Plus board,  
.................... // which is what I used to test the driver.  Change these  
.................... // pins to fit your own board.  
.................... #define LCD_DB4   PIN_C5  
.................... #define LCD_DB5   PIN_C2  
.................... #define LCD_DB6   PIN_C1  
.................... #define LCD_DB7   PIN_C0  
....................  
.................... #define LCD_E     PIN_C6  
.................... #define LCD_RS    PIN_C7  
.................... #define LCD_RW    PIN_C3 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines  
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line  
....................  
.................... int8 const LCD_INIT_STRING[4] = {  
....................     0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots  
....................     0xc,                    // Display on  
....................     1,                      // Clear display  
....................     6                       // Increment cursor  
....................  };  
....................                                
.................... void lcd_send_nibble(int8 nibble) {  
....................     // Note:  !! converts an integer expression  
....................     // to a boolean (1 or 0).  
....................     output_bit(LCD_DB4, !!(nibble & 1));  
03D4:  BSF    03.6
03D5:  BTFSS  60.0
03D6:  GOTO   3D9
03D7:  BCF    03.6
03D8:  GOTO   3DC
03D9:  BCF    03.6
03DA:  BCF    07.5
03DB:  GOTO   3DD
03DC:  BSF    07.5
03DD:  BCF    2B.5
03DE:  MOVF   2B,W
03DF:  BSF    03.5
03E0:  MOVWF  07
....................     output_bit(LCD_DB5, !!(nibble & 2));   
03E1:  BCF    03.5
03E2:  BSF    03.6
03E3:  BTFSS  60.1
03E4:  GOTO   3E7
03E5:  BCF    03.6
03E6:  GOTO   3EA
03E7:  BCF    03.6
03E8:  BCF    07.2
03E9:  GOTO   3EB
03EA:  BSF    07.2
03EB:  BCF    2B.2
03EC:  MOVF   2B,W
03ED:  BSF    03.5
03EE:  MOVWF  07
....................     output_bit(LCD_DB6, !!(nibble & 4));     
03EF:  BCF    03.5
03F0:  BSF    03.6
03F1:  BTFSS  60.2
03F2:  GOTO   3F5
03F3:  BCF    03.6
03F4:  GOTO   3F8
03F5:  BCF    03.6
03F6:  BCF    07.1
03F7:  GOTO   3F9
03F8:  BSF    07.1
03F9:  BCF    2B.1
03FA:  MOVF   2B,W
03FB:  BSF    03.5
03FC:  MOVWF  07
....................     output_bit(LCD_DB7, !!(nibble & 8));     
03FD:  BCF    03.5
03FE:  BSF    03.6
03FF:  BTFSS  60.3
0400:  GOTO   403
0401:  BCF    03.6
0402:  GOTO   406
0403:  BCF    03.6
0404:  BCF    07.0
0405:  GOTO   407
0406:  BSF    07.0
0407:  BCF    2B.0
0408:  MOVF   2B,W
0409:  BSF    03.5
040A:  MOVWF  07
....................  
....................     delay_cycles(1);  
040B:  NOP
....................     output_high(LCD_E);  
040C:  BCF    03.5
040D:  BCF    2B.6
040E:  MOVF   2B,W
040F:  BSF    03.5
0410:  MOVWF  07
0411:  BCF    03.5
0412:  BSF    07.6
....................     delay_us(2);  
0413:  MOVLW  02
0414:  MOVWF  77
0415:  DECFSZ 77,F
0416:  GOTO   415
0417:  NOP
....................     output_low(LCD_E);  
0418:  BCF    2B.6
0419:  MOVF   2B,W
041A:  BSF    03.5
041B:  MOVWF  07
041C:  BCF    03.5
041D:  BCF    07.6
041E:  RETURN
.................... }  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_nibble(void) {  
....................     int8 retval;  
....................     // Create bit variables so that we can easily set  
....................     // individual bits in the retval variable.  
....................     #bit retval_0 = retval.0  
....................     #bit retval_1 = retval.1  
....................     #bit retval_2 = retval.2  
....................     #bit retval_3 = retval.3  
....................  
....................     retval = 0;  
....................          
....................     output_high(LCD_E);  
....................     delay_cycles(1);  
....................  
....................     retval_0 = input(LCD_DB4);  
....................     retval_1 = input(LCD_DB5);  
....................     retval_2 = input(LCD_DB6);  
....................     retval_3 = input(LCD_DB7);  
....................    
....................     output_low(LCD_E);  
....................      
....................     return(retval);    
.................... }     
.................... #endif  
....................  
.................... #ifdef USE_LCD_RW  
.................... int8 lcd_read_byte(void) {  
....................     int8 low;  
....................     int8 high;  
....................  
....................     output_high(LCD_RW);  
....................     delay_cycles(1);  
....................  
....................     high = lcd_read_nibble();  
....................  
....................     low = lcd_read_nibble();  
....................  
....................     return( (high<<4) | low);  
.................... }  
.................... #endif  
....................  
.................... void lcd_send_byte(int8 address, int8 n) {  
....................     output_low(LCD_RS);  
041F:  BCF    2B.7
0420:  MOVF   2B,W
0421:  BSF    03.5
0422:  MOVWF  07
0423:  BCF    03.5
0424:  BCF    07.7
....................  
....................     #ifdef USE_LCD_RW  
....................     while(bit_test(lcd_read_byte(),7)) ;  
....................     #else  
....................     delay_us(60);   
0425:  MOVLW  4F
0426:  MOVWF  77
0427:  DECFSZ 77,F
0428:  GOTO   427
0429:  GOTO   42A
....................     #endif  
....................  
....................     if(address)  
042A:  BSF    03.6
042B:  MOVF   5D,F
042C:  BTFSS  03.2
042D:  GOTO   430
042E:  BCF    03.6
042F:  GOTO   438
0430:  BCF    03.6
....................        output_high(LCD_RS);  
0431:  BCF    2B.7
0432:  MOVF   2B,W
0433:  BSF    03.5
0434:  MOVWF  07
0435:  BCF    03.5
0436:  BSF    07.7
0437:  GOTO   43E
....................     else  
....................        output_low(LCD_RS);  
0438:  BCF    2B.7
0439:  MOVF   2B,W
043A:  BSF    03.5
043B:  MOVWF  07
043C:  BCF    03.5
043D:  BCF    07.7
....................            
....................      delay_cycles(1);  
043E:  NOP
....................  
....................     #ifdef USE_LCD_RW  
....................     output_low(LCD_RW);  
....................     delay_cycles(1);  
....................     #endif  
....................  
....................     output_low(LCD_E);  
043F:  BCF    2B.6
0440:  MOVF   2B,W
0441:  BSF    03.5
0442:  MOVWF  07
0443:  BCF    03.5
0444:  BCF    07.6
....................  
....................     lcd_send_nibble(n >> 4);  
0445:  BSF    03.6
0446:  SWAPF  5E,W
0447:  MOVWF  5F
0448:  MOVLW  0F
0449:  ANDWF  5F,F
044A:  MOVF   5F,W
044B:  MOVWF  60
044C:  BCF    03.6
044D:  CALL   3D4
....................     lcd_send_nibble(n & 0xf);  
044E:  BSF    03.6
044F:  MOVF   5E,W
0450:  ANDLW  0F
0451:  MOVWF  5F
0452:  MOVF   5F,W
0453:  MOVWF  60
0454:  BCF    03.6
0455:  CALL   3D4
0456:  RETURN
.................... }  
....................  
.................... void lcd_init(void) {  
....................     int8 i;  
....................  
....................     output_low(LCD_RS);  
*
0471:  BCF    2B.7
0472:  MOVF   2B,W
0473:  BSF    03.5
0474:  MOVWF  07
0475:  BCF    03.5
0476:  BCF    07.7
....................  
....................     #ifdef USE_LCD_RW  
....................     output_low(LCD_RW);  
....................     #endif  
....................  
....................     output_low(LCD_E);  
0477:  BCF    2B.6
0478:  MOVF   2B,W
0479:  BSF    03.5
047A:  MOVWF  07
047B:  BCF    03.5
047C:  BCF    07.6
....................  
....................     delay_ms(15);  
047D:  MOVLW  0F
047E:  BSF    03.6
047F:  MOVWF  59
0480:  BCF    03.6
0481:  CALL   3BF
....................  
....................     for(i=0 ;i < 3; i++) {  
0482:  BSF    03.6
0483:  CLRF   4D
0484:  BCF    03.6
0485:  BSF    03.6
0486:  MOVF   4D,W
0487:  SUBLW  02
0488:  BTFSC  03.0
0489:  GOTO   48C
048A:  BCF    03.6
048B:  GOTO   49B
048C:  BCF    03.6
....................         lcd_send_nibble(0x03);  
048D:  MOVLW  03
048E:  BSF    03.6
048F:  MOVWF  60
0490:  BCF    03.6
0491:  CALL   3D4
....................         delay_ms(5);  
0492:  MOVLW  05
0493:  BSF    03.6
0494:  MOVWF  59
0495:  BCF    03.6
0496:  CALL   3BF
0497:  BSF    03.6
0498:  INCF   4D,F
0499:  BCF    03.6
049A:  GOTO   485
....................     }  
....................  
....................     lcd_send_nibble(0x02);  
049B:  MOVLW  02
049C:  BSF    03.6
049D:  MOVWF  60
049E:  BCF    03.6
049F:  CALL   3D4
....................  
....................     for(i=0; i < sizeof(LCD_INIT_STRING); i++) {  
04A0:  BSF    03.6
04A1:  CLRF   4D
04A2:  BCF    03.6
04A3:  BSF    03.6
04A4:  MOVF   4D,W
04A5:  SUBLW  03
04A6:  BTFSC  03.0
04A7:  GOTO   4AA
04A8:  BCF    03.6
04A9:  GOTO   4BF
04AA:  BCF    03.6
....................         lcd_send_byte(0, LCD_INIT_STRING[i]);  
04AB:  BSF    03.6
04AC:  MOVF   4D,W
04AD:  BCF    03.6
04AE:  CALL   058
04AF:  BSF    03.6
04B0:  MOVWF  4E
04B1:  CLRF   5D
04B2:  MOVF   4E,W
04B3:  MOVWF  5E
04B4:  BCF    03.6
04B5:  CALL   41F
....................          
....................         // If the R/W signal is not used, then  
....................         // the busy bit can't be polled.  One of  
....................         // the init commands takes longer than  
....................         // the hard-coded delay of 60 us, so in  
....................         // that case, lets just do a 5 ms delay  
....................         // after all four of them.  
....................         #ifndef USE_LCD_RW  
....................         delay_ms(5);  
04B6:  MOVLW  05
04B7:  BSF    03.6
04B8:  MOVWF  59
04B9:  BCF    03.6
04BA:  CALL   3BF
....................         #endif  
04BB:  BSF    03.6
04BC:  INCF   4D,F
04BD:  BCF    03.6
04BE:  GOTO   4A3
....................    }  
.................... }  
....................  
.................... void lcd_gotoxy(int8 x, int8 y) {  
....................     int8 address;  
....................  
....................     if(y != 1)  
*
04E1:  BSF    03.6
04E2:  DECFSZ 5A,W
04E3:  GOTO   4E6
04E4:  GOTO   4E8
04E5:  BCF    03.6
04E6:  BCF    03.6
04E7:  GOTO   4EA
04E8:  BCF    03.6
04E9:  GOTO   4EF
....................         address = lcd_line_two;  
04EA:  MOVLW  40
04EB:  BSF    03.6
04EC:  MOVWF  5B
04ED:  BCF    03.6
04EE:  GOTO   4F2
....................     else  
....................         address=0;  
04EF:  BSF    03.6
04F0:  CLRF   5B
04F1:  BCF    03.6
....................  
....................     address += x-1;  
04F2:  MOVLW  01
04F3:  BSF    03.6
04F4:  SUBWF  59,W
04F5:  ADDWF  5B,F
....................     lcd_send_byte(0, 0x80 | address);  
04F6:  MOVF   5B,W
04F7:  IORLW  80
04F8:  MOVWF  5C
04F9:  CLRF   5D
04FA:  MOVF   5C,W
04FB:  MOVWF  5E
04FC:  BCF    03.6
04FD:  CALL   41F
04FE:  NOP
.................... }  
....................  
.................... void lcd_putc(char c) {  
....................     switch(c) {  
*
04C2:  BSF    03.6
04C3:  MOVF   58,W
04C4:  XORLW  0C
04C5:  BCF    03.6
04C6:  BTFSC  03.2
04C7:  GOTO   4CF
04C8:  XORLW  06
04C9:  BTFSC  03.2
04CA:  GOTO   4DB
04CB:  XORLW  02
04CC:  BTFSC  03.2
04CD:  GOTO   500
04CE:  GOTO   507
....................         case '\f':  
....................           lcd_send_byte(0,1);  
04CF:  BSF    03.6
04D0:  CLRF   5D
04D1:  MOVLW  01
04D2:  MOVWF  5E
04D3:  BCF    03.6
04D4:  CALL   41F
....................           delay_ms(2);  
04D5:  MOVLW  02
04D6:  BSF    03.6
04D7:  MOVWF  59
04D8:  BCF    03.6
04D9:  CALL   3BF
....................           break;  
04DA:  GOTO   50F
....................          
....................         case '\n':  
....................            lcd_gotoxy(1,2);  
04DB:  MOVLW  01
04DC:  BSF    03.6
04DD:  MOVWF  59
04DE:  MOVLW  02
04DF:  MOVWF  5A
04E0:  BCF    03.6
....................            break;  
*
04FF:  GOTO   50F
....................          
....................         case '\b':  
....................            lcd_send_byte(0,0x10);  
0500:  BSF    03.6
0501:  CLRF   5D
0502:  MOVLW  10
0503:  MOVWF  5E
0504:  BCF    03.6
0505:  CALL   41F
....................            break;  
0506:  GOTO   50F
....................          
....................         default:  
....................            lcd_send_byte(1,c);  
0507:  MOVLW  01
0508:  BSF    03.6
0509:  MOVWF  5D
050A:  MOVF   58,W
050B:  MOVWF  5E
050C:  BCF    03.6
050D:  CALL   41F
....................            break; 
050E:  GOTO   50F
....................     }  
050F:  RETURN
.................... }  
....................  
.................... #ifdef USE_LCD_RW  
.................... char lcd_getc(int8 x, int8 y) {  
....................     char value;  
....................  
....................     lcd_gotoxy(x,y);  
....................  
....................     // Wait until busy flag is low.  
....................     while(bit_test(lcd_read_byte(),7));   
....................  
....................     output_high(LCD_RS);  
....................     value = lcd_read_byte();  
....................     output_low(lcd_RS);  
....................  
....................     return(value);  
.................... }  
.................... #endif 
....................  
.................... void lcd_put_4_digit_int(int value) { 
....................     int thousands = value / 1000; 
....................     lcd_send_byte(1, thousands + 0x30); 
....................    
....................     int hundreds = (value - thousands*1000) / 100; 
....................     lcd_send_byte(1, hundreds + 0x30); 
....................        
....................     int tens = (value - thousands*1000 - hundreds*100 ) / 10; 
....................     lcd_send_byte(1, tens + 0x30); 
....................        
....................     int ones = (value - thousands*1000 - hundreds*100 - tens*10); 
....................     lcd_send_byte(1, ones + 0x30); 
.................... } 
....................  
.................... void lcd_put_2_digit_int(int value) { 
*
05E3:  BSF    03.6
05E4:  CLRF   5D
05E5:  MOVF   55,W
05E6:  MOVWF  5C
05E7:  MOVLW  03
05E8:  MOVWF  5F
05E9:  MOVLW  E8
05EA:  MOVWF  5E
05EB:  BCF    03.6
05EC:  CALL   562
05ED:  MOVF   78,W
05EE:  BSF    03.6
05EF:  MOVWF  56
05F0:  CLRF   5B
05F1:  MOVF   56,W
05F2:  MOVWF  5A
05F3:  MOVLW  03
05F4:  MOVWF  5D
05F5:  MOVLW  E8
05F6:  MOVWF  5C
05F7:  BCF    03.6
05F8:  CALL   59B
05F9:  MOVF   79,W
05FA:  MOVWF  7A
05FB:  MOVF   78,W
05FC:  BSF    03.6
05FD:  SUBWF  55,W
05FE:  MOVWF  5A
05FF:  CLRF   5B
0600:  MOVF   7A,W
0601:  BTFSS  03.0
0602:  INCFSZ 7A,W
0603:  SUBWF  5B,F
0604:  MOVF   5B,W
0605:  MOVWF  5D
0606:  MOVF   5A,W
0607:  MOVWF  5C
0608:  CLRF   5F
0609:  MOVLW  64
060A:  MOVWF  5E
060B:  BCF    03.6
060C:  CALL   562
060D:  MOVF   78,W
060E:  BSF    03.6
060F:  MOVWF  57
0610:  CLRF   5B
0611:  MOVF   56,W
0612:  MOVWF  5A
0613:  MOVLW  03
0614:  MOVWF  5D
0615:  MOVLW  E8
0616:  MOVWF  5C
0617:  BCF    03.6
0618:  CALL   59B
0619:  MOVF   79,W
061A:  MOVWF  7A
061B:  MOVF   78,W
061C:  BSF    03.6
061D:  SUBWF  55,W
061E:  MOVWF  5A
061F:  CLRF   5B
0620:  MOVF   7A,W
0621:  BTFSS  03.0
0622:  INCFSZ 7A,W
0623:  SUBWF  5B,F
0624:  MOVF   57,W
0625:  MOVWF  5C
0626:  MOVLW  64
0627:  MOVWF  5D
0628:  BCF    03.6
0629:  CALL   5BC
062A:  MOVF   78,W
062B:  BSF    03.6
062C:  SUBWF  5A,F
062D:  MOVLW  00
062E:  BTFSS  03.0
062F:  MOVLW  01
0630:  SUBWF  5B,F
0631:  MOVF   5B,W
0632:  MOVWF  5D
0633:  MOVF   5A,W
0634:  MOVWF  5C
0635:  CLRF   5F
0636:  MOVLW  0A
0637:  MOVWF  5E
0638:  BCF    03.6
0639:  CALL   562
063A:  MOVF   78,W
063B:  BSF    03.6
063C:  MOVWF  58
....................     int thousands = value / 1000; 
....................     int hundreds = (value - thousands*1000) / 100; 
....................      
....................     int tens = (value - thousands*1000 - hundreds*100 ) / 10; 
....................     lcd_send_byte(1, tens + 0x30); 
063D:  MOVLW  30
063E:  ADDWF  58,W
063F:  MOVWF  5A
0640:  MOVLW  01
0641:  MOVWF  5D
0642:  MOVF   5A,W
0643:  MOVWF  5E
0644:  BCF    03.6
0645:  CALL   41F
....................    
....................     int ones = (value - thousands*1000 - hundreds*100 - tens*10); 
0646:  BSF    03.6
0647:  CLRF   5B
0648:  MOVF   56,W
0649:  MOVWF  5A
064A:  MOVLW  03
064B:  MOVWF  5D
064C:  MOVLW  E8
064D:  MOVWF  5C
064E:  BCF    03.6
064F:  CALL   59B
0650:  MOVF   79,W
0651:  MOVWF  7A
0652:  MOVF   78,W
0653:  BSF    03.6
0654:  SUBWF  55,W
0655:  MOVWF  5A
0656:  CLRF   5B
0657:  MOVF   7A,W
0658:  BTFSS  03.0
0659:  INCFSZ 7A,W
065A:  SUBWF  5B,F
065B:  MOVF   57,W
065C:  MOVWF  5C
065D:  MOVLW  64
065E:  MOVWF  5D
065F:  BCF    03.6
0660:  CALL   5BC
0661:  MOVF   78,W
0662:  BSF    03.6
0663:  SUBWF  5A,F
0664:  MOVLW  00
0665:  BTFSS  03.0
0666:  MOVLW  01
0667:  SUBWF  5B,F
0668:  MOVF   58,W
0669:  MOVWF  5C
066A:  MOVLW  0A
066B:  MOVWF  5D
066C:  BCF    03.6
066D:  CALL   5BC
066E:  MOVF   78,W
066F:  BSF    03.6
0670:  SUBWF  5A,W
0671:  MOVWF  59
....................     lcd_send_byte(1, ones + 0x30); 
0672:  MOVLW  30
0673:  ADDWF  59,W
0674:  MOVWF  5A
0675:  MOVLW  01
0676:  MOVWF  5D
0677:  MOVF   5A,W
0678:  MOVWF  5E
0679:  BCF    03.6
067A:  CALL   41F
067B:  RETURN
....................  
.................... } 
....................  
.................... void lcd_put_1_digit_int(int value) { 
*
094C:  BSF    03.6
094D:  CLRF   5D
094E:  MOVF   55,W
094F:  MOVWF  5C
0950:  MOVLW  03
0951:  MOVWF  5F
0952:  MOVLW  E8
0953:  MOVWF  5E
0954:  BCF    0A.3
0955:  BCF    03.6
0956:  CALL   562
0957:  BSF    0A.3
0958:  MOVF   78,W
0959:  BSF    03.6
095A:  MOVWF  56
095B:  CLRF   5B
095C:  MOVF   56,W
095D:  MOVWF  5A
095E:  MOVLW  03
095F:  MOVWF  5D
0960:  MOVLW  E8
0961:  MOVWF  5C
0962:  BCF    0A.3
0963:  BCF    03.6
0964:  CALL   59B
0965:  BSF    0A.3
0966:  MOVF   79,W
0967:  MOVWF  7A
0968:  MOVF   78,W
0969:  BSF    03.6
096A:  SUBWF  55,W
096B:  MOVWF  5A
096C:  CLRF   5B
096D:  MOVF   7A,W
096E:  BTFSS  03.0
096F:  INCFSZ 7A,W
0970:  SUBWF  5B,F
0971:  MOVF   5B,W
0972:  MOVWF  5D
0973:  MOVF   5A,W
0974:  MOVWF  5C
0975:  CLRF   5F
0976:  MOVLW  64
0977:  MOVWF  5E
0978:  BCF    0A.3
0979:  BCF    03.6
097A:  CALL   562
097B:  BSF    0A.3
097C:  MOVF   78,W
097D:  BSF    03.6
097E:  MOVWF  57
097F:  CLRF   5B
0980:  MOVF   56,W
0981:  MOVWF  5A
0982:  MOVLW  03
0983:  MOVWF  5D
0984:  MOVLW  E8
0985:  MOVWF  5C
0986:  BCF    0A.3
0987:  BCF    03.6
0988:  CALL   59B
0989:  BSF    0A.3
098A:  MOVF   79,W
098B:  MOVWF  7A
098C:  MOVF   78,W
098D:  BSF    03.6
098E:  SUBWF  55,W
098F:  MOVWF  5A
0990:  CLRF   5B
0991:  MOVF   7A,W
0992:  BTFSS  03.0
0993:  INCFSZ 7A,W
0994:  SUBWF  5B,F
0995:  MOVF   57,W
0996:  MOVWF  5C
0997:  MOVLW  64
0998:  MOVWF  5D
0999:  BCF    0A.3
099A:  BCF    03.6
099B:  CALL   5BC
099C:  BSF    0A.3
099D:  MOVF   78,W
099E:  BSF    03.6
099F:  SUBWF  5A,F
09A0:  MOVLW  00
09A1:  BTFSS  03.0
09A2:  MOVLW  01
09A3:  SUBWF  5B,F
09A4:  MOVF   5B,W
09A5:  MOVWF  5D
09A6:  MOVF   5A,W
09A7:  MOVWF  5C
09A8:  CLRF   5F
09A9:  MOVLW  0A
09AA:  MOVWF  5E
09AB:  BCF    0A.3
09AC:  BCF    03.6
09AD:  CALL   562
09AE:  BSF    0A.3
09AF:  MOVF   78,W
09B0:  BSF    03.6
09B1:  MOVWF  58
09B2:  CLRF   5B
09B3:  MOVF   56,W
09B4:  MOVWF  5A
09B5:  MOVLW  03
09B6:  MOVWF  5D
09B7:  MOVLW  E8
09B8:  MOVWF  5C
09B9:  BCF    0A.3
09BA:  BCF    03.6
09BB:  CALL   59B
09BC:  BSF    0A.3
09BD:  MOVF   79,W
09BE:  MOVWF  7A
09BF:  MOVF   78,W
09C0:  BSF    03.6
09C1:  SUBWF  55,W
09C2:  MOVWF  5A
09C3:  CLRF   5B
09C4:  MOVF   7A,W
09C5:  BTFSS  03.0
09C6:  INCFSZ 7A,W
09C7:  SUBWF  5B,F
09C8:  MOVF   57,W
09C9:  MOVWF  5C
09CA:  MOVLW  64
09CB:  MOVWF  5D
09CC:  BCF    0A.3
09CD:  BCF    03.6
09CE:  CALL   5BC
09CF:  BSF    0A.3
09D0:  MOVF   78,W
09D1:  BSF    03.6
09D2:  SUBWF  5A,F
09D3:  MOVLW  00
09D4:  BTFSS  03.0
09D5:  MOVLW  01
09D6:  SUBWF  5B,F
09D7:  MOVF   58,W
09D8:  MOVWF  5C
09D9:  MOVLW  0A
09DA:  MOVWF  5D
09DB:  BCF    0A.3
09DC:  BCF    03.6
09DD:  CALL   5BC
09DE:  BSF    0A.3
09DF:  MOVF   78,W
09E0:  BSF    03.6
09E1:  SUBWF  5A,W
09E2:  MOVWF  59
....................     int thousands = value / 1000; 
....................     int hundreds = (value - thousands*1000) / 100; 
....................     int tens = (value - thousands*1000 - hundreds*100 ) / 10; 
....................    
....................     int ones = (value - thousands*1000 - hundreds*100 - tens*10); 
....................     lcd_send_byte(1, ones + 0x30); 
09E3:  MOVLW  30
09E4:  ADDWF  59,W
09E5:  MOVWF  5A
09E6:  MOVLW  01
09E7:  MOVWF  5D
09E8:  MOVF   5A,W
09E9:  MOVWF  5E
09EA:  BCF    0A.3
09EB:  BCF    03.6
09EC:  CALL   41F
09ED:  BSF    0A.3
09EE:  NOP
.................... } 
....................  
.................... void lcd_clear() { 
....................   lcd_send_byte(0, 0x01); 
*
0866:  BSF    03.6
0867:  CLRF   5D
0868:  MOVLW  01
0869:  MOVWF  5E
086A:  BCF    0A.3
086B:  BCF    03.6
086C:  CALL   41F
086D:  BSF    0A.3
....................   delay_ms(2); 
086E:  MOVLW  02
086F:  BSF    03.6
0870:  MOVWF  59
0871:  BCF    0A.3
0872:  BCF    03.6
0873:  CALL   3BF
0874:  BSF    0A.3
0875:  NOP
.................... } 
....................  
.................... void lcd_display_time(int day, int month, int year, int week_day, int hours, int mins, int seconds, bst) { 
....................     lcd_clear(); 
....................     switch(week_day) { 
0876:  BSF    03.6
0877:  MOVF   50,W
0878:  XORLW  00
0879:  BCF    03.6
087A:  BTFSC  03.2
087B:  GOTO   08F
087C:  XORLW  01
087D:  BTFSC  03.2
087E:  GOTO   099
087F:  XORLW  03
0880:  BTFSC  03.2
0881:  GOTO   0A3
0882:  XORLW  01
0883:  BTFSC  03.2
0884:  GOTO   0AD
0885:  XORLW  07
0886:  BTFSC  03.2
0887:  GOTO   0B7
0888:  XORLW  01
0889:  BTFSC  03.2
088A:  GOTO   0C1
088B:  XORLW  03
088C:  BTFSC  03.2
088D:  GOTO   0CB
088E:  GOTO   0D5
....................         case 0:  
....................             lcd_putc("Sun");   
088F:  MOVLW  60
0890:  BSF    03.6
0891:  MOVWF  0D
0892:  MOVLW  00
0893:  MOVWF  0F
0894:  BCF    0A.3
0895:  BCF    03.6
0896:  CALL   510
0897:  BSF    0A.3
....................             break; 
0898:  GOTO   0DF
....................         case 1:  
....................             lcd_putc("Mon");  
0899:  MOVLW  62
089A:  BSF    03.6
089B:  MOVWF  0D
089C:  MOVLW  00
089D:  MOVWF  0F
089E:  BCF    0A.3
089F:  BCF    03.6
08A0:  CALL   510
08A1:  BSF    0A.3
....................             break; 
08A2:  GOTO   0DF
....................         case 2: 
....................             lcd_putc("Tues"); 
08A3:  MOVLW  64
08A4:  BSF    03.6
08A5:  MOVWF  0D
08A6:  MOVLW  00
08A7:  MOVWF  0F
08A8:  BCF    0A.3
08A9:  BCF    03.6
08AA:  CALL   510
08AB:  BSF    0A.3
....................              break; 
08AC:  GOTO   0DF
....................         case 3: 
....................             lcd_putc("Wes"); 
08AD:  MOVLW  67
08AE:  BSF    03.6
08AF:  MOVWF  0D
08B0:  MOVLW  00
08B1:  MOVWF  0F
08B2:  BCF    0A.3
08B3:  BCF    03.6
08B4:  CALL   510
08B5:  BSF    0A.3
....................              break; 
08B6:  GOTO   0DF
....................         case 4: 
....................             lcd_putc("Thurs"); 
08B7:  MOVLW  69
08B8:  BSF    03.6
08B9:  MOVWF  0D
08BA:  MOVLW  00
08BB:  MOVWF  0F
08BC:  BCF    0A.3
08BD:  BCF    03.6
08BE:  CALL   510
08BF:  BSF    0A.3
....................              break; 
08C0:  GOTO   0DF
....................         case 5: 
....................             lcd_putc("Fri"); 
08C1:  MOVLW  6C
08C2:  BSF    03.6
08C3:  MOVWF  0D
08C4:  MOVLW  00
08C5:  MOVWF  0F
08C6:  BCF    0A.3
08C7:  BCF    03.6
08C8:  CALL   510
08C9:  BSF    0A.3
....................              break; 
08CA:  GOTO   0DF
....................         case 6:  
....................             lcd_putc("Sat"); 
08CB:  MOVLW  6E
08CC:  BSF    03.6
08CD:  MOVWF  0D
08CE:  MOVLW  00
08CF:  MOVWF  0F
08D0:  BCF    0A.3
08D1:  BCF    03.6
08D2:  CALL   510
08D3:  BSF    0A.3
....................              break; 
08D4:  GOTO   0DF
....................         default: 
....................             lcd_putc("???");  
08D5:  MOVLW  70
08D6:  BSF    03.6
08D7:  MOVWF  0D
08D8:  MOVLW  00
08D9:  MOVWF  0F
08DA:  BCF    0A.3
08DB:  BCF    03.6
08DC:  CALL   510
08DD:  BSF    0A.3
....................             break; 
08DE:  GOTO   0DF
....................     }    
....................     lcd_putc(" "); 
08DF:  MOVLW  72
08E0:  BSF    03.6
08E1:  MOVWF  0D
08E2:  MOVLW  00
08E3:  MOVWF  0F
08E4:  BCF    0A.3
08E5:  BCF    03.6
08E6:  CALL   510
08E7:  BSF    0A.3
....................     lcd_put_2_digit_int(day); 
08E8:  BSF    03.6
08E9:  MOVF   4D,W
08EA:  MOVWF  55
08EB:  BCF    0A.3
08EC:  BCF    03.6
08ED:  CALL   5E3
08EE:  BSF    0A.3
....................     lcd_putc("/"); 
08EF:  MOVLW  73
08F0:  BSF    03.6
08F1:  MOVWF  0D
08F2:  MOVLW  00
08F3:  MOVWF  0F
08F4:  BCF    0A.3
08F5:  BCF    03.6
08F6:  CALL   510
08F7:  BSF    0A.3
....................     lcd_put_2_digit_int(month); 
08F8:  BSF    03.6
08F9:  MOVF   4E,W
08FA:  MOVWF  55
08FB:  BCF    0A.3
08FC:  BCF    03.6
08FD:  CALL   5E3
08FE:  BSF    0A.3
....................     lcd_putc("/20"); 
08FF:  MOVLW  74
0900:  BSF    03.6
0901:  MOVWF  0D
0902:  MOVLW  00
0903:  MOVWF  0F
0904:  BCF    0A.3
0905:  BCF    03.6
0906:  CALL   510
0907:  BSF    0A.3
....................     lcd_put_2_digit_int(year); 
0908:  BSF    03.6
0909:  MOVF   4F,W
090A:  MOVWF  55
090B:  BCF    0A.3
090C:  BCF    03.6
090D:  CALL   5E3
090E:  BSF    0A.3
....................      
....................     lcd_putc("\n"); 
090F:  MOVLW  76
0910:  BSF    03.6
0911:  MOVWF  0D
0912:  MOVLW  00
0913:  MOVWF  0F
0914:  BCF    0A.3
0915:  BCF    03.6
0916:  CALL   510
0917:  BSF    0A.3
....................  
....................     lcd_put_2_digit_int(hours); 
0918:  BSF    03.6
0919:  MOVF   51,W
091A:  MOVWF  55
091B:  BCF    0A.3
091C:  BCF    03.6
091D:  CALL   5E3
091E:  BSF    0A.3
....................     lcd_putc(":"); 
091F:  MOVLW  77
0920:  BSF    03.6
0921:  MOVWF  0D
0922:  MOVLW  00
0923:  MOVWF  0F
0924:  BCF    0A.3
0925:  BCF    03.6
0926:  CALL   510
0927:  BSF    0A.3
....................     lcd_put_2_digit_int(mins); 
0928:  BSF    03.6
0929:  MOVF   52,W
092A:  MOVWF  55
092B:  BCF    0A.3
092C:  BCF    03.6
092D:  CALL   5E3
092E:  BSF    0A.3
....................     lcd_putc(":"); 
092F:  MOVLW  78
0930:  BSF    03.6
0931:  MOVWF  0D
0932:  MOVLW  00
0933:  MOVWF  0F
0934:  BCF    0A.3
0935:  BCF    03.6
0936:  CALL   510
0937:  BSF    0A.3
....................     lcd_put_2_digit_int(seconds); 
0938:  BSF    03.6
0939:  MOVF   53,W
093A:  MOVWF  55
093B:  BCF    0A.3
093C:  BCF    03.6
093D:  CALL   5E3
093E:  BSF    0A.3
....................  
....................     lcd_putc(" +"); 
093F:  MOVLW  79
0940:  BSF    03.6
0941:  MOVWF  0D
0942:  MOVLW  00
0943:  MOVWF  0F
0944:  BCF    0A.3
0945:  BCF    03.6
0946:  CALL   510
0947:  BSF    0A.3
....................     lcd_put_1_digit_int(bst); 
0948:  BSF    03.6
0949:  MOVF   54,W
094A:  MOVWF  55
094B:  BCF    03.6
*
09EF:  NOP
.................... } 
....................  
....................  
.................... /****************************************************************************** 
.................... * Block: constant definitions                                                 * 
.................... * Purpose: This block defines human readable names to the pins on the board   * 
.................... ******************************************************************************/ 
.................... #define ORANGE_LED          PIN_E0 
.................... #define RED_LED             PIN_E1 
.................... #define LED_ON              0 
.................... #define LED_OFF             1 
....................  
.................... #define CARRIER_SENSE       PIN_B4 
.................... #define CARRIER_SENSE_ON    1 
.................... #define CARRIER_SENSE_OFF   0 
....................  
....................  
.................... #define PUSH_BUTTON         PIN_B5 
.................... #define PUSH_BUTTON_ON      0 
.................... #define PUSH_BUTTON_OFF     1 
....................  
.................... /****************************************************************************** 
.................... * Block: global variable definitions                                          * 
.................... * Purpose: This block defines global vars that will be used in ISR's          * 
.................... ******************************************************************************/ 
.................... //this is the number of ticks that timer2 has recorded since board start up 
.................... unsigned long     ticks                       = 0; 
....................  
.................... //this is the tick value that the signal went off at 
.................... unsigned long     signal_off_start            = 0; 
....................  
.................... //this is the tick value that the signal came on at 
.................... unsigned long     signal_on_start             = 0; 
....................  
.................... //this is the tick value that the previous signal came on at 
.................... unsigned long     prev_signal_on_start        = 0; 
....................  
.................... //this is the number of seconds that have passed this min 
.................... int               seconds_passed              = 0; 
....................  
.................... int               year                        = 0; 
.................... int               month                       = 0; 
.................... int               day                         = 0; 
.................... int               week_day                    = 0; 
.................... int               hour                        = 0; 
.................... int               mins                        = 0; 
.................... int bst = 0; 
....................  
.................... int     a_bits[61]; 
.................... int     b_bits[61]; 
.................... /****************************************************************************** 
.................... * Function: setup_hardware                                                    * 
.................... * Purpose: This is used to configure all of the hardware on the board         * 
.................... * Accepts: nothing                                                            * 
.................... * Reuturns: nothing                                                           * 
.................... ******************************************************************************/ 
.................... void setup_hardware(void) { 
....................     //make sure all ports are using digital I/O 
....................     setup_adc_ports(NO_ANALOGS); 
*
0457:  BSF    03.5
0458:  BCF    1F.0
0459:  BCF    1F.1
045A:  MOVLW  00
045B:  BSF    03.6
045C:  MOVWF  05
045D:  MOVLW  00
045E:  MOVWF  09
045F:  MOVLW  00
0460:  MOVWF  06
0461:  MOVLW  00
0462:  MOVWF  08
....................  
....................     //16000000/(4*16*250*10) = 100 so timer fires every 10ms 
....................     setup_timer_2(T2_DIV_BY_16, 250, 10);  
0463:  MOVLW  48
0464:  MOVWF  78
0465:  MOVF   78,W
0466:  IORLW  06
0467:  BCF    03.5
0468:  BCF    03.6
0469:  MOVWF  12
046A:  MOVLW  FA
046B:  BSF    03.5
046C:  MOVWF  12
....................     set_timer2(0); 
046D:  BCF    03.5
046E:  CLRF   11
....................     enable_interrupts(global); 
046F:  MOVLW  C0
0470:  IORWF  0B,F
....................  
....................     lcd_init();  // Always call this first.  
*
04BF:  BSF    0A.3
04C0:  BCF    0A.4
04C1:  GOTO   02B (RETURN)
.................... } 
....................  
....................  
.................... /****************************************************************************** 
.................... * Function: store_bits                                                        * 
.................... * Purpose: This is used store the bits that have been collected               * 
.................... * Accepts: nothing                                                            * 
.................... * Reuturns: nothing                                                           * 
.................... ******************************************************************************/ 
.................... void process_bits(void) { 
....................     int i; 
....................  
....................     for(i = 1; i < 59; i++) { 
*
0082:  MOVLW  01
0083:  BSF    03.6
0084:  MOVWF  65
0085:  BCF    03.6
0086:  BSF    03.6
0087:  MOVF   65,W
0088:  SUBLW  3A
0089:  BTFSC  03.0
008A:  GOTO   08D
008B:  BCF    03.6
008C:  GOTO   287
008D:  BCF    03.6
....................         switch(i) { 
008E:  MOVLW  11
008F:  BSF    03.6
0090:  SUBWF  65,W
0091:  ADDLW  DD
0092:  BTFSS  03.0
0093:  GOTO   096
0094:  BCF    03.6
0095:  GOTO   283
0096:  ADDLW  23
0097:  BCF    03.6
0098:  GOTO   28A
....................             //cases for the year 
....................             case 17: 
....................                 if(a_bits[i]) 
0099:  MOVLW  A0
009A:  BSF    03.6
009B:  ADDWF  65,W
009C:  MOVWF  04
009D:  BCF    03.7
009E:  MOVF   00,F
009F:  BTFSS  03.2
00A0:  GOTO   0A3
00A1:  BCF    03.6
00A2:  GOTO   0A6
00A3:  BCF    03.6
....................                     year += 80; 
00A4:  MOVLW  50
00A5:  ADDWF  35,F
....................             break; 
00A6:  GOTO   283
....................          
....................             case 18: 
....................                 if(a_bits[i]) 
00A7:  MOVLW  A0
00A8:  BSF    03.6
00A9:  ADDWF  65,W
00AA:  MOVWF  04
00AB:  BCF    03.7
00AC:  MOVF   00,F
00AD:  BTFSS  03.2
00AE:  GOTO   0B1
00AF:  BCF    03.6
00B0:  GOTO   0B4
00B1:  BCF    03.6
....................                     year += 40; 
00B2:  MOVLW  28
00B3:  ADDWF  35,F
....................                 break; 
00B4:  GOTO   283
....................              
....................             case 19: 
....................                 if(a_bits[i]) 
00B5:  MOVLW  A0
00B6:  BSF    03.6
00B7:  ADDWF  65,W
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  MOVF   00,F
00BB:  BTFSS  03.2
00BC:  GOTO   0BF
00BD:  BCF    03.6
00BE:  GOTO   0C2
00BF:  BCF    03.6
....................                     year += 20; 
00C0:  MOVLW  14
00C1:  ADDWF  35,F
....................                 break; 
00C2:  GOTO   283
....................              
....................             case 20: 
....................                 if(a_bits[i]) 
00C3:  MOVLW  A0
00C4:  BSF    03.6
00C5:  ADDWF  65,W
00C6:  MOVWF  04
00C7:  BCF    03.7
00C8:  MOVF   00,F
00C9:  BTFSS  03.2
00CA:  GOTO   0CD
00CB:  BCF    03.6
00CC:  GOTO   0D0
00CD:  BCF    03.6
....................                     year += 10; 
00CE:  MOVLW  0A
00CF:  ADDWF  35,F
....................                 break; 
00D0:  GOTO   283
....................              
....................             case 21: 
....................                 if(a_bits[i]) 
00D1:  MOVLW  A0
00D2:  BSF    03.6
00D3:  ADDWF  65,W
00D4:  MOVWF  04
00D5:  BCF    03.7
00D6:  MOVF   00,F
00D7:  BTFSS  03.2
00D8:  GOTO   0DB
00D9:  BCF    03.6
00DA:  GOTO   0DE
00DB:  BCF    03.6
....................                     year += 8; 
00DC:  MOVLW  08
00DD:  ADDWF  35,F
....................                 break; 
00DE:  GOTO   283
....................              
....................             case 22: 
....................                 if(a_bits[i]) 
00DF:  MOVLW  A0
00E0:  BSF    03.6
00E1:  ADDWF  65,W
00E2:  MOVWF  04
00E3:  BCF    03.7
00E4:  MOVF   00,F
00E5:  BTFSS  03.2
00E6:  GOTO   0E9
00E7:  BCF    03.6
00E8:  GOTO   0EC
00E9:  BCF    03.6
....................                     year += 4; 
00EA:  MOVLW  04
00EB:  ADDWF  35,F
....................                 break; 
00EC:  GOTO   283
....................              
....................             case 23: 
....................                 if(a_bits[i]) 
00ED:  MOVLW  A0
00EE:  BSF    03.6
00EF:  ADDWF  65,W
00F0:  MOVWF  04
00F1:  BCF    03.7
00F2:  MOVF   00,F
00F3:  BTFSS  03.2
00F4:  GOTO   0F7
00F5:  BCF    03.6
00F6:  GOTO   0FA
00F7:  BCF    03.6
....................                     year += 2; 
00F8:  MOVLW  02
00F9:  ADDWF  35,F
....................                 break; 
00FA:  GOTO   283
....................              
....................             case 24: 
....................                 if(a_bits[i]) 
00FB:  MOVLW  A0
00FC:  BSF    03.6
00FD:  ADDWF  65,W
00FE:  MOVWF  04
00FF:  BCF    03.7
0100:  MOVF   00,F
0101:  BTFSS  03.2
0102:  GOTO   105
0103:  BCF    03.6
0104:  GOTO   108
0105:  BCF    03.6
....................                     year += 1; 
0106:  MOVLW  01
0107:  ADDWF  35,F
....................                 break; 
0108:  GOTO   283
....................  
....................             //cases for the month 
....................             case 25: 
....................                 if(a_bits[i]) 
0109:  MOVLW  A0
010A:  BSF    03.6
010B:  ADDWF  65,W
010C:  MOVWF  04
010D:  BCF    03.7
010E:  MOVF   00,F
010F:  BTFSS  03.2
0110:  GOTO   113
0111:  BCF    03.6
0112:  GOTO   116
0113:  BCF    03.6
....................                     month += 10; 
0114:  MOVLW  0A
0115:  ADDWF  36,F
....................                 break; 
0116:  GOTO   283
....................  
....................             case 26: 
....................                 if(a_bits[i]) 
0117:  MOVLW  A0
0118:  BSF    03.6
0119:  ADDWF  65,W
011A:  MOVWF  04
011B:  BCF    03.7
011C:  MOVF   00,F
011D:  BTFSS  03.2
011E:  GOTO   121
011F:  BCF    03.6
0120:  GOTO   124
0121:  BCF    03.6
....................                     month += 8; 
0122:  MOVLW  08
0123:  ADDWF  36,F
....................                 break; 
0124:  GOTO   283
....................  
....................             case 27: 
....................                 if(a_bits[i]) 
0125:  MOVLW  A0
0126:  BSF    03.6
0127:  ADDWF  65,W
0128:  MOVWF  04
0129:  BCF    03.7
012A:  MOVF   00,F
012B:  BTFSS  03.2
012C:  GOTO   12F
012D:  BCF    03.6
012E:  GOTO   132
012F:  BCF    03.6
....................                     month += 4; 
0130:  MOVLW  04
0131:  ADDWF  36,F
....................                 break; 
0132:  GOTO   283
....................  
....................             case 28: 
....................                 if(a_bits[i]) 
0133:  MOVLW  A0
0134:  BSF    03.6
0135:  ADDWF  65,W
0136:  MOVWF  04
0137:  BCF    03.7
0138:  MOVF   00,F
0139:  BTFSS  03.2
013A:  GOTO   13D
013B:  BCF    03.6
013C:  GOTO   140
013D:  BCF    03.6
....................                     month += 2; 
013E:  MOVLW  02
013F:  ADDWF  36,F
....................                 break; 
0140:  GOTO   283
....................  
....................             case 29: 
....................                 if(a_bits[i]) 
0141:  MOVLW  A0
0142:  BSF    03.6
0143:  ADDWF  65,W
0144:  MOVWF  04
0145:  BCF    03.7
0146:  MOVF   00,F
0147:  BTFSS  03.2
0148:  GOTO   14B
0149:  BCF    03.6
014A:  GOTO   14E
014B:  BCF    03.6
....................                     month += 1; 
014C:  MOVLW  01
014D:  ADDWF  36,F
....................                 break; 
014E:  GOTO   283
....................  
....................             //cases for the day 
....................             case 30: 
....................                 if(a_bits[i]) 
014F:  MOVLW  A0
0150:  BSF    03.6
0151:  ADDWF  65,W
0152:  MOVWF  04
0153:  BCF    03.7
0154:  MOVF   00,F
0155:  BTFSS  03.2
0156:  GOTO   159
0157:  BCF    03.6
0158:  GOTO   15C
0159:  BCF    03.6
....................                     day += 20; 
015A:  MOVLW  14
015B:  ADDWF  37,F
....................                 break; 
015C:  GOTO   283
....................  
....................             case 31: 
....................                 if(a_bits[i]) 
015D:  MOVLW  A0
015E:  BSF    03.6
015F:  ADDWF  65,W
0160:  MOVWF  04
0161:  BCF    03.7
0162:  MOVF   00,F
0163:  BTFSS  03.2
0164:  GOTO   167
0165:  BCF    03.6
0166:  GOTO   16A
0167:  BCF    03.6
....................                     day += 10; 
0168:  MOVLW  0A
0169:  ADDWF  37,F
....................                 break; 
016A:  GOTO   283
....................  
....................             case 32: 
....................                 if(a_bits[i]) 
016B:  MOVLW  A0
016C:  BSF    03.6
016D:  ADDWF  65,W
016E:  MOVWF  04
016F:  BCF    03.7
0170:  MOVF   00,F
0171:  BTFSS  03.2
0172:  GOTO   175
0173:  BCF    03.6
0174:  GOTO   178
0175:  BCF    03.6
....................                     day += 8; 
0176:  MOVLW  08
0177:  ADDWF  37,F
....................                 break; 
0178:  GOTO   283
....................  
....................             case 33: 
....................                 if(a_bits[i]) 
0179:  MOVLW  A0
017A:  BSF    03.6
017B:  ADDWF  65,W
017C:  MOVWF  04
017D:  BCF    03.7
017E:  MOVF   00,F
017F:  BTFSS  03.2
0180:  GOTO   183
0181:  BCF    03.6
0182:  GOTO   186
0183:  BCF    03.6
....................                     day += 4; 
0184:  MOVLW  04
0185:  ADDWF  37,F
....................                 break; 
0186:  GOTO   283
....................  
....................             case 34: 
....................                 if(a_bits[i]) 
0187:  MOVLW  A0
0188:  BSF    03.6
0189:  ADDWF  65,W
018A:  MOVWF  04
018B:  BCF    03.7
018C:  MOVF   00,F
018D:  BTFSS  03.2
018E:  GOTO   191
018F:  BCF    03.6
0190:  GOTO   194
0191:  BCF    03.6
....................                     day += 2; 
0192:  MOVLW  02
0193:  ADDWF  37,F
....................                 break; 
0194:  GOTO   283
....................  
....................             case 35: 
....................                 if(a_bits[i]) 
0195:  MOVLW  A0
0196:  BSF    03.6
0197:  ADDWF  65,W
0198:  MOVWF  04
0199:  BCF    03.7
019A:  MOVF   00,F
019B:  BTFSS  03.2
019C:  GOTO   19F
019D:  BCF    03.6
019E:  GOTO   1A2
019F:  BCF    03.6
....................                     day += 1; 
01A0:  MOVLW  01
01A1:  ADDWF  37,F
....................                 break; 
01A2:  GOTO   283
....................  
....................             //cases for the day name 
....................             case 36: 
....................                 if(a_bits[i]) 
01A3:  MOVLW  A0
01A4:  BSF    03.6
01A5:  ADDWF  65,W
01A6:  MOVWF  04
01A7:  BCF    03.7
01A8:  MOVF   00,F
01A9:  BTFSS  03.2
01AA:  GOTO   1AD
01AB:  BCF    03.6
01AC:  GOTO   1B0
01AD:  BCF    03.6
....................                     week_day += 4; 
01AE:  MOVLW  04
01AF:  ADDWF  38,F
....................                 break; 
01B0:  GOTO   283
....................  
....................             case 37: 
....................                 if(a_bits[i]) 
01B1:  MOVLW  A0
01B2:  BSF    03.6
01B3:  ADDWF  65,W
01B4:  MOVWF  04
01B5:  BCF    03.7
01B6:  MOVF   00,F
01B7:  BTFSS  03.2
01B8:  GOTO   1BB
01B9:  BCF    03.6
01BA:  GOTO   1BE
01BB:  BCF    03.6
....................                     week_day += 2; 
01BC:  MOVLW  02
01BD:  ADDWF  38,F
....................                 break; 
01BE:  GOTO   283
....................  
....................             case 38: 
....................                 if(a_bits[i]) 
01BF:  MOVLW  A0
01C0:  BSF    03.6
01C1:  ADDWF  65,W
01C2:  MOVWF  04
01C3:  BCF    03.7
01C4:  MOVF   00,F
01C5:  BTFSS  03.2
01C6:  GOTO   1C9
01C7:  BCF    03.6
01C8:  GOTO   1CC
01C9:  BCF    03.6
....................                     week_day += 1; 
01CA:  MOVLW  01
01CB:  ADDWF  38,F
....................                 break; 
01CC:  GOTO   283
....................  
....................             //cases for the hour 
....................             case 39: 
....................                 if(a_bits[i]) 
01CD:  MOVLW  A0
01CE:  BSF    03.6
01CF:  ADDWF  65,W
01D0:  MOVWF  04
01D1:  BCF    03.7
01D2:  MOVF   00,F
01D3:  BTFSS  03.2
01D4:  GOTO   1D7
01D5:  BCF    03.6
01D6:  GOTO   1DA
01D7:  BCF    03.6
....................                     hour += 20; 
01D8:  MOVLW  14
01D9:  ADDWF  39,F
....................                  break; 
01DA:  GOTO   283
....................  
....................             case 40: 
....................                 if(a_bits[i]) 
01DB:  MOVLW  A0
01DC:  BSF    03.6
01DD:  ADDWF  65,W
01DE:  MOVWF  04
01DF:  BCF    03.7
01E0:  MOVF   00,F
01E1:  BTFSS  03.2
01E2:  GOTO   1E5
01E3:  BCF    03.6
01E4:  GOTO   1E8
01E5:  BCF    03.6
....................                     hour += 10; 
01E6:  MOVLW  0A
01E7:  ADDWF  39,F
....................                 break; 
01E8:  GOTO   283
....................  
....................             case 41: 
....................                 if(a_bits[i]) 
01E9:  MOVLW  A0
01EA:  BSF    03.6
01EB:  ADDWF  65,W
01EC:  MOVWF  04
01ED:  BCF    03.7
01EE:  MOVF   00,F
01EF:  BTFSS  03.2
01F0:  GOTO   1F3
01F1:  BCF    03.6
01F2:  GOTO   1F6
01F3:  BCF    03.6
....................                     hour += 8; 
01F4:  MOVLW  08
01F5:  ADDWF  39,F
....................                 break; 
01F6:  GOTO   283
....................  
....................             case 42: 
....................                 if(a_bits[i]) 
01F7:  MOVLW  A0
01F8:  BSF    03.6
01F9:  ADDWF  65,W
01FA:  MOVWF  04
01FB:  BCF    03.7
01FC:  MOVF   00,F
01FD:  BTFSS  03.2
01FE:  GOTO   201
01FF:  BCF    03.6
0200:  GOTO   204
0201:  BCF    03.6
....................                     hour += 4; 
0202:  MOVLW  04
0203:  ADDWF  39,F
....................                 break; 
0204:  GOTO   283
....................  
....................             case 43: 
....................                 if(a_bits[i]) 
0205:  MOVLW  A0
0206:  BSF    03.6
0207:  ADDWF  65,W
0208:  MOVWF  04
0209:  BCF    03.7
020A:  MOVF   00,F
020B:  BTFSS  03.2
020C:  GOTO   20F
020D:  BCF    03.6
020E:  GOTO   212
020F:  BCF    03.6
....................                     hour += 2; 
0210:  MOVLW  02
0211:  ADDWF  39,F
....................                 break; 
0212:  GOTO   283
....................  
....................             case 44: 
....................                 if(a_bits[i]) 
0213:  MOVLW  A0
0214:  BSF    03.6
0215:  ADDWF  65,W
0216:  MOVWF  04
0217:  BCF    03.7
0218:  MOVF   00,F
0219:  BTFSS  03.2
021A:  GOTO   21D
021B:  BCF    03.6
021C:  GOTO   220
021D:  BCF    03.6
....................                     hour += 1; 
021E:  MOVLW  01
021F:  ADDWF  39,F
....................                 break; 
0220:  GOTO   283
....................  
....................             //cases for the min 
....................             case 45: 
....................                 if(a_bits[i]) 
0221:  MOVLW  A0
0222:  BSF    03.6
0223:  ADDWF  65,W
0224:  MOVWF  04
0225:  BCF    03.7
0226:  MOVF   00,F
0227:  BTFSS  03.2
0228:  GOTO   22B
0229:  BCF    03.6
022A:  GOTO   22E
022B:  BCF    03.6
....................                     mins += 40; 
022C:  MOVLW  28
022D:  ADDWF  3A,F
....................                 break; 
022E:  GOTO   283
....................  
....................             case 46: 
....................                 if(a_bits[i]) 
022F:  MOVLW  A0
0230:  BSF    03.6
0231:  ADDWF  65,W
0232:  MOVWF  04
0233:  BCF    03.7
0234:  MOVF   00,F
0235:  BTFSS  03.2
0236:  GOTO   239
0237:  BCF    03.6
0238:  GOTO   23C
0239:  BCF    03.6
....................                     mins += 20; 
023A:  MOVLW  14
023B:  ADDWF  3A,F
....................                 break; 
023C:  GOTO   283
....................  
....................             case 47: 
....................                 if(a_bits[i]) 
023D:  MOVLW  A0
023E:  BSF    03.6
023F:  ADDWF  65,W
0240:  MOVWF  04
0241:  BCF    03.7
0242:  MOVF   00,F
0243:  BTFSS  03.2
0244:  GOTO   247
0245:  BCF    03.6
0246:  GOTO   24A
0247:  BCF    03.6
....................                     mins += 10; 
0248:  MOVLW  0A
0249:  ADDWF  3A,F
....................                 break; 
024A:  GOTO   283
....................  
....................             case 48: 
....................                 if(a_bits[i]) 
024B:  MOVLW  A0
024C:  BSF    03.6
024D:  ADDWF  65,W
024E:  MOVWF  04
024F:  BCF    03.7
0250:  MOVF   00,F
0251:  BTFSS  03.2
0252:  GOTO   255
0253:  BCF    03.6
0254:  GOTO   258
0255:  BCF    03.6
....................                     mins += 8; 
0256:  MOVLW  08
0257:  ADDWF  3A,F
....................                 break; 
0258:  GOTO   283
....................  
....................             case 49: 
....................                 if(a_bits[i]) 
0259:  MOVLW  A0
025A:  BSF    03.6
025B:  ADDWF  65,W
025C:  MOVWF  04
025D:  BCF    03.7
025E:  MOVF   00,F
025F:  BTFSS  03.2
0260:  GOTO   263
0261:  BCF    03.6
0262:  GOTO   266
0263:  BCF    03.6
....................                     mins += 4; 
0264:  MOVLW  04
0265:  ADDWF  3A,F
....................                 break; 
0266:  GOTO   283
....................  
....................  
....................             case 50: 
....................                 if(a_bits[i]) 
0267:  MOVLW  A0
0268:  BSF    03.6
0269:  ADDWF  65,W
026A:  MOVWF  04
026B:  BCF    03.7
026C:  MOVF   00,F
026D:  BTFSS  03.2
026E:  GOTO   271
026F:  BCF    03.6
0270:  GOTO   274
0271:  BCF    03.6
....................                     mins += 2; 
0272:  MOVLW  02
0273:  ADDWF  3A,F
....................                 break; 
0274:  GOTO   283
....................  
....................             case 51: 
....................                 if(a_bits[i]) 
0275:  MOVLW  A0
0276:  BSF    03.6
0277:  ADDWF  65,W
0278:  MOVWF  04
0279:  BCF    03.7
027A:  MOVF   00,F
027B:  BTFSS  03.2
027C:  GOTO   27F
027D:  BCF    03.6
027E:  GOTO   282
027F:  BCF    03.6
....................                     mins += 1; 
0280:  MOVLW  01
0281:  ADDWF  3A,F
....................                 break; 
0282:  GOTO   283
....................         }     
0283:  BSF    03.6
0284:  INCF   65,F
0285:  BCF    03.6
0286:  GOTO   086
....................     } 
0287:  BCF    0A.3
0288:  BCF    0A.4
0289:  GOTO   3BB (RETURN)
.................... } 
....................  
.................... /****************************************************************************** 
.................... * Function: timer_2_isr                                                       * 
.................... * Purpose: This is used to increment the tick count at regular intervals      * 
.................... * Accepts: nothing                                                            * 
.................... * Reuturns: nothing                                                           * 
.................... ******************************************************************************/ 
.................... #int_timer2 
.................... void timer_2_isr(void) { 
....................     //increase the ticks by one  
....................     ticks++; 
*
007B:  INCF   2C,F
007C:  BTFSC  03.2
007D:  INCF   2D,F
.................... } 
....................  
.................... /****************************************************************************** 
.................... * Function: port_b_isr                                                        * 
.................... * Purpose: This is used process the change in the carrier signal              * 
.................... * Accepts: nothing                                                            * 
.................... * Reuturns: nothing                                                           * 
.................... ******************************************************************************/ 
007E:  BCF    0C.1
007F:  BCF    0A.3
0080:  BCF    0A.4
0081:  GOTO   031
.................... #int_rb 
.................... void port_b_isr(void) { 
*
02B1:  BSF    03.6
02B2:  CLRF   62
02B3:  CLRF   61
02B4:  CLRF   64
02B5:  CLRF   63
....................     //local vars to hold the length of time the signal has been off 
....................     //and the length of time the previous signal was on 
....................     unsigned long signal_off_length = 0; 
....................     unsigned long prev_signal_on_length = 0; 
....................  
....................     //set the led to reflect the new state of the carrier 
....................     output_bit(ORANGE_LED, input(CARRIER_SENSE)); 
02B6:  BSF    03.5
02B7:  BCF    03.6
02B8:  BSF    06.4
02B9:  BCF    03.5
02BA:  BTFSC  06.4
02BB:  GOTO   2BE
02BC:  BCF    09.0
02BD:  GOTO   2BF
02BE:  BSF    09.0
02BF:  BSF    03.5
02C0:  BCF    09.0
....................  
....................     //the carrier has gone off - this means that we need to start timing 
....................     //so that when it comes back on we can calculate the amount of time that it was off 
....................     //and thus the bit pattern it represents 
....................     if(input(CARRIER_SENSE) == CARRIER_SENSE_OFF) { 
02C1:  BSF    06.4
02C2:  BCF    03.5
02C3:  BTFSC  06.4
02C4:  GOTO   2CA
....................         //set the new current off start 
....................         signal_off_start = ticks; 
02C5:  MOVF   2D,W
02C6:  MOVWF  2F
02C7:  MOVF   2C,W
02C8:  MOVWF  2E
....................         //return from isr no more work to do 
....................         return; 
02C9:  GOTO   3BB
....................     } 
....................      
....................     /*reaching here means that the carrier has come back on so we need to process this*/ 
....................  
....................     //set the previous on start and the new current on start 
....................     prev_signal_on_start = signal_on_start; 
02CA:  MOVF   31,W
02CB:  MOVWF  33
02CC:  MOVF   30,W
02CD:  MOVWF  32
....................     signal_on_start = ticks; 
02CE:  MOVF   2D,W
02CF:  MOVWF  31
02D0:  MOVF   2C,W
02D1:  MOVWF  30
....................  
....................     //determine the amount off time that the signal was off by taking the on time away 
....................     //from the off time  
....................     signal_off_length = signal_on_start - signal_off_start; 
02D2:  MOVF   2E,W
02D3:  SUBWF  30,W
02D4:  BSF    03.6
02D5:  MOVWF  61
02D6:  BCF    03.6
02D7:  MOVF   31,W
02D8:  BSF    03.6
02D9:  MOVWF  62
02DA:  BCF    03.6
02DB:  MOVF   2F,W
02DC:  BTFSS  03.0
02DD:  INCFSZ 2F,W
02DE:  GOTO   2E0
02DF:  GOTO   2E3
02E0:  BSF    03.6
02E1:  SUBWF  62,F
02E2:  BCF    03.6
....................  
....................     //determine how long the previous signal was on for by taking the previous on time away 
....................     //from the current start time 
....................     prev_signal_on_length =  signal_off_start - prev_signal_on_start; 
02E3:  MOVF   32,W
02E4:  SUBWF  2E,W
02E5:  BSF    03.6
02E6:  MOVWF  63
02E7:  BCF    03.6
02E8:  MOVF   2F,W
02E9:  BSF    03.6
02EA:  MOVWF  64
02EB:  BCF    03.6
02EC:  MOVF   33,W
02ED:  BTFSS  03.0
02EE:  INCFSZ 33,W
02EF:  GOTO   2F1
02F0:  GOTO   2F4
02F1:  BSF    03.6
02F2:  SUBWF  64,F
02F3:  BCF    03.6
....................  
....................     //if the signal was off for between 70ms and 130ms and was previously on for at least 
....................     //150ms then we have found 00 
....................     if(signal_off_length >= 7 && signal_off_length <= 13 &&prev_signal_on_length > 15) { 
02F4:  BSF    03.6
02F5:  MOVF   62,F
02F6:  BTFSC  03.2
02F7:  GOTO   2FA
02F8:  BCF    03.6
02F9:  GOTO   303
02FA:  BCF    03.6
02FB:  BSF    03.6
02FC:  MOVF   61,W
02FD:  SUBLW  06
02FE:  BTFSS  03.0
02FF:  GOTO   302
0300:  BCF    03.6
0301:  GOTO   32C
0302:  BCF    03.6
0303:  BSF    03.6
0304:  MOVF   62,F
0305:  BTFSC  03.2
0306:  GOTO   309
0307:  BCF    03.6
0308:  GOTO   32C
0309:  BCF    03.6
030A:  BSF    03.6
030B:  MOVF   61,W
030C:  SUBLW  0D
030D:  BTFSC  03.0
030E:  GOTO   311
030F:  BCF    03.6
0310:  GOTO   32C
0311:  BCF    03.6
0312:  BSF    03.6
0313:  MOVF   64,F
0314:  BTFSC  03.2
0315:  GOTO   318
0316:  BCF    03.6
0317:  GOTO   321
0318:  BCF    03.6
0319:  BSF    03.6
031A:  MOVF   63,W
031B:  SUBLW  0F
031C:  BTFSS  03.0
031D:  GOTO   320
031E:  BCF    03.6
031F:  GOTO   32C
0320:  BCF    03.6
....................         a_bits[seconds_passed] = 0; 
0321:  MOVLW  A0
0322:  ADDWF  34,W
0323:  MOVWF  04
0324:  BCF    03.7
0325:  CLRF   00
....................         b_bits[seconds_passed] = 0; 
0326:  MOVLW  10
0327:  ADDWF  34,W
0328:  MOVWF  04
0329:  BSF    03.7
032A:  CLRF   00
....................         seconds_passed++; 
032B:  INCF   34,F
....................     } 
....................  
....................     //if the signal was off for between 170ms and 230ms and was previously on for at least 
....................     //150ms then we have found 10 
....................     if(signal_off_length >= 17 && signal_off_length <= 23 &&prev_signal_on_length > 15) { 
032C:  BSF    03.6
032D:  MOVF   62,F
032E:  BTFSC  03.2
032F:  GOTO   332
0330:  BCF    03.6
0331:  GOTO   33B
0332:  BCF    03.6
0333:  BSF    03.6
0334:  MOVF   61,W
0335:  SUBLW  10
0336:  BTFSS  03.0
0337:  GOTO   33A
0338:  BCF    03.6
0339:  GOTO   365
033A:  BCF    03.6
033B:  BSF    03.6
033C:  MOVF   62,F
033D:  BTFSC  03.2
033E:  GOTO   341
033F:  BCF    03.6
0340:  GOTO   365
0341:  BCF    03.6
0342:  BSF    03.6
0343:  MOVF   61,W
0344:  SUBLW  17
0345:  BTFSC  03.0
0346:  GOTO   349
0347:  BCF    03.6
0348:  GOTO   365
0349:  BCF    03.6
034A:  BSF    03.6
034B:  MOVF   64,F
034C:  BTFSC  03.2
034D:  GOTO   350
034E:  BCF    03.6
034F:  GOTO   359
0350:  BCF    03.6
0351:  BSF    03.6
0352:  MOVF   63,W
0353:  SUBLW  0F
0354:  BTFSS  03.0
0355:  GOTO   358
0356:  BCF    03.6
0357:  GOTO   365
0358:  BCF    03.6
....................         a_bits[seconds_passed] = 1; 
0359:  MOVLW  A0
035A:  ADDWF  34,W
035B:  MOVWF  04
035C:  BCF    03.7
035D:  MOVLW  01
035E:  MOVWF  00
....................         b_bits[seconds_passed] = 0; 
035F:  MOVLW  10
0360:  ADDWF  34,W
0361:  MOVWF  04
0362:  BSF    03.7
0363:  CLRF   00
....................         seconds_passed++; 
0364:  INCF   34,F
....................     } 
....................  
....................  
....................     if(signal_off_length >= 27 && signal_off_length <= 33 &&prev_signal_on_length > 15) { 
0365:  BSF    03.6
0366:  MOVF   62,F
0367:  BTFSC  03.2
0368:  GOTO   36B
0369:  BCF    03.6
036A:  GOTO   374
036B:  BCF    03.6
036C:  BSF    03.6
036D:  MOVF   61,W
036E:  SUBLW  1A
036F:  BTFSS  03.0
0370:  GOTO   373
0371:  BCF    03.6
0372:  GOTO   39F
0373:  BCF    03.6
0374:  BSF    03.6
0375:  MOVF   62,F
0376:  BTFSC  03.2
0377:  GOTO   37A
0378:  BCF    03.6
0379:  GOTO   39F
037A:  BCF    03.6
037B:  BSF    03.6
037C:  MOVF   61,W
037D:  SUBLW  21
037E:  BTFSC  03.0
037F:  GOTO   382
0380:  BCF    03.6
0381:  GOTO   39F
0382:  BCF    03.6
0383:  BSF    03.6
0384:  MOVF   64,F
0385:  BTFSC  03.2
0386:  GOTO   389
0387:  BCF    03.6
0388:  GOTO   392
0389:  BCF    03.6
038A:  BSF    03.6
038B:  MOVF   63,W
038C:  SUBLW  0F
038D:  BTFSS  03.0
038E:  GOTO   391
038F:  BCF    03.6
0390:  GOTO   39F
0391:  BCF    03.6
....................         a_bits[seconds_passed] = 1; 
0392:  MOVLW  A0
0393:  ADDWF  34,W
0394:  MOVWF  04
0395:  BCF    03.7
0396:  MOVLW  01
0397:  MOVWF  00
....................         b_bits[seconds_passed] = 1; 
0398:  MOVLW  10
0399:  ADDWF  34,W
039A:  MOVWF  04
039B:  BSF    03.7
039C:  MOVLW  01
039D:  MOVWF  00
....................         seconds_passed++; 
039E:  INCF   34,F
....................     } 
....................  
....................     //if the signal was off more than 470ms then we have found the min marker 
....................     //reset all of the data and process what we have stored 
....................     if(signal_off_length >= 47) { 
039F:  BSF    03.6
03A0:  MOVF   62,F
03A1:  BTFSC  03.2
03A2:  GOTO   3A5
03A3:  BCF    03.6
03A4:  GOTO   3AE
03A5:  BCF    03.6
03A6:  BSF    03.6
03A7:  MOVF   61,W
03A8:  SUBLW  2E
03A9:  BTFSS  03.0
03AA:  GOTO   3AD
03AB:  BCF    03.6
03AC:  GOTO   3BB
03AD:  BCF    03.6
....................         seconds_passed = 1; 
03AE:  MOVLW  01
03AF:  MOVWF  34
....................         year = 0; 
03B0:  CLRF   35
....................         month = 0; 
03B1:  CLRF   36
....................         day = 0; 
03B2:  CLRF   37
....................         week_day = 0; 
03B3:  CLRF   38
....................         hour = 0; 
03B4:  CLRF   39
....................         mins = 0; 
03B5:  CLRF   3A
....................         bst = b_bits[58]; 
03B6:  BSF    03.6
03B7:  MOVF   4A,W
03B8:  BCF    03.6
03B9:  MOVWF  3B
....................         process_bits();      
03BA:  GOTO   082
....................     } 
03BB:  BCF    0B.0
03BC:  BCF    0A.3
03BD:  BCF    0A.4
03BE:  GOTO   031
.................... } 
....................  
.................... /****************************************************************************** 
.................... * Function: main                                                              * 
.................... * Purpose: This is the entry point for program execution                      * 
.................... * Accepts: nothing                                                            * 
.................... * Reuturns: nothing                                                           * 
.................... ******************************************************************************/ 
.................... void main(void) { 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  30
0804:  BSF    03.5
0805:  MOVWF  10
0806:  MOVF   10,W
0807:  MOVLW  FF
0808:  BCF    03.5
0809:  MOVWF  2B
080A:  CLRF   2D
080B:  CLRF   2C
080C:  CLRF   2F
080D:  CLRF   2E
080E:  CLRF   31
080F:  CLRF   30
0810:  CLRF   33
0811:  CLRF   32
0812:  CLRF   34
0813:  CLRF   35
0814:  CLRF   36
0815:  CLRF   37
0816:  CLRF   38
0817:  CLRF   39
0818:  CLRF   3A
0819:  CLRF   3B
081A:  BSF    03.5
081B:  BCF    1F.0
081C:  BCF    1F.1
081D:  MOVLW  00
081E:  BSF    03.6
081F:  MOVWF  05
0820:  MOVLW  00
0821:  MOVWF  09
0822:  MOVLW  00
0823:  MOVWF  06
0824:  MOVLW  00
0825:  MOVWF  08
0826:  CLRF   08
0827:  BCF    03.5
0828:  BCF    03.6
....................     //Call routine to be sure that any final config has been done before  
....................     //we start the main program code 
....................     setup_hardware(); 
0829:  BCF    0A.3
082A:  GOTO   457
082B:  BSF    0A.3
....................  
....................     //not needed in production - ICD interfers with the signal, this  
....................     //gives time to unplug 
....................     delay_ms(5000); 
082C:  MOVLW  14
082D:  BSF    03.6
082E:  MOVWF  4D
082F:  BCF    03.6
0830:  MOVLW  FA
0831:  BSF    03.6
0832:  MOVWF  59
0833:  BCF    0A.3
0834:  BCF    03.6
0835:  CALL   3BF
0836:  BSF    0A.3
0837:  BSF    03.6
0838:  DECFSZ 4D,F
0839:  GOTO   03C
083A:  GOTO   03E
083B:  BCF    03.6
083C:  BCF    03.6
083D:  GOTO   030
....................  
....................     //enable the interupts on timer 2 and on pin4 of port b 
....................     enable_interrupts(int_timer2); 
083E:  BSF    03.5
083F:  BCF    03.6
0840:  BSF    0C.1
....................     enable_interrupts(int_rb4); 
0841:  BCF    03.5
0842:  BSF    0B.3
0843:  BSF    03.5
0844:  BSF    16.4
0845:  BCF    03.5
....................  
....................     //update the display every 750ms 
....................     while(1) { 
....................         lcd_display_time(day, month, year, week_day, hour, mins, seconds_passed, bst); 
0846:  MOVF   37,W
0847:  BSF    03.6
0848:  MOVWF  4D
0849:  BCF    03.6
084A:  MOVF   36,W
084B:  BSF    03.6
084C:  MOVWF  4E
084D:  BCF    03.6
084E:  MOVF   35,W
084F:  BSF    03.6
0850:  MOVWF  4F
0851:  BCF    03.6
0852:  MOVF   38,W
0853:  BSF    03.6
0854:  MOVWF  50
0855:  BCF    03.6
0856:  MOVF   39,W
0857:  BSF    03.6
0858:  MOVWF  51
0859:  BCF    03.6
085A:  MOVF   3A,W
085B:  BSF    03.6
085C:  MOVWF  52
085D:  BCF    03.6
085E:  MOVF   34,W
085F:  BSF    03.6
0860:  MOVWF  53
0861:  BCF    03.6
0862:  MOVF   3B,W
0863:  BSF    03.6
0864:  MOVWF  54
0865:  BCF    03.6
....................         delay_ms(750); 
*
09F0:  MOVLW  03
09F1:  BSF    03.6
09F2:  MOVWF  4D
09F3:  BCF    03.6
09F4:  MOVLW  FA
09F5:  BSF    03.6
09F6:  MOVWF  59
09F7:  BCF    0A.3
09F8:  BCF    03.6
09F9:  CALL   3BF
09FA:  BSF    0A.3
09FB:  BSF    03.6
09FC:  DECFSZ 4D,F
09FD:  GOTO   200
09FE:  GOTO   202
09FF:  BCF    03.6
0A00:  BCF    03.6
0A01:  GOTO   1F4
0A02:  BCF    03.6
0A03:  GOTO   046
....................     }    
.................... } 
0A04:  GOTO   204

Configuration Fuses:
   Word  1: 1DF5   INTRC NOWDT NOPUT MCLR NOPROTECT NOBROWNOUT BORV19 PLLEN DEBUG
   Word  2: 3FFF   NOVCAP

   Some fuses have been forced to be compatible with the ICD debugger.
